name: SonarCloud Analysis with Quality Gate and SonarScanner

on:
  push:
    branches:
      - main

jobs:
  sonarcloud:
    name: Analyze with SonarCloud
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Set up .NET Core
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: 2.0

      - name: Install SonarScanner
        run: |
          dotnet tool install --global dotnet-sonarscanner
        shell: bash

      - name: Build
        run: dotnet build --configuration Release

      - name: SonarCloud Analysis
        env:
          # Set your SonarCloud project key and organization here
          SONAR_PROJECT_KEY: ${{ secrets.SONAR_PROJECT_KEY }}
          SONAR_ORGANIZATION: ${{ secrets.SONAR_ORGANIZATION }}
        run: |
          dotnet-sonarscanner begin /k:"$SONAR_PROJECT_KEY" /o:"$SONAR_ORGANIZATION" /d:sonar.login="${{ secrets.SONAR_TOKEN }}" /d:sonar.host.url="https://sonarcloud.io" /d:sonar.exclusions="**/bin/**/*,**/obj/**/*" /d:sonar.coverage.exclusions="**/bin/**/*,**/obj/**/*" /d:sonar.cs.opencover.reportsPaths=coverage.opencover.xml
          dotnet build --configuration Release
          dotnet test /p:CollectCoverage=true /p:CoverletOutputFormat=opencover
          dotnet-sonarscanner end /d:sonar.login="${{ secrets.SONAR_TOKEN }}"

      - name: Check Quality Gate Status
        run: |
          echo "Checking SonarCloud Quality Gate Status..."
          status=$(curl -s -u "${{ secrets.SONAR_TOKEN }}:" "https://sonarcloud.io/api/qualitygates/project_status?projectKey=$SONAR_PROJECT_KEY&branch=main" | jq -r '.projectStatus.status')
          if [[ $status != "OK" ]]; then
            echo "Quality Gate check failed: $status"
            exit 1
          else
            echo "Quality Gate passed: $status"
          fi

      - name: Upload SonarCloud Analysis
        uses: sonarsource/sonarcloud-github-action@v1
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}